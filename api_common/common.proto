syntax = "proto3";

import "google/protobuf/empty.proto";

package common;

option go_package = "/";

service Paxos {
  rpc ProcessTxnSet(common.TxnSet) returns (google.protobuf.Empty);
  rpc EnqueueTxn(common.TxnRequest) returns (google.protobuf.Empty);
  rpc Prepare(common.Prepare) returns (google.protobuf.Empty);
  rpc Promise(common.Promise) returns (google.protobuf.Empty);
  rpc Accept(common.Accept) returns (google.protobuf.Empty);
  rpc Accepted(common.Accepted) returns (google.protobuf.Empty);
  rpc Commit(common.Commit) returns (google.protobuf.Empty);
  rpc Sync(common.SyncRequest) returns (google.protobuf.Empty);
  rpc IsAlive(common.IsAliveRequest) returns (google.protobuf.Empty);
  rpc PrintBalance(GetBalanceRequest) returns (GetBalanceResponse);
  rpc GetServerBalance(common.GetServerBalanceRequest) returns (GetServerBalanceResponse);
  rpc PrintLogs(PrintLogsRequest) returns (PrintLogsResponse);
  rpc PrintDB(PrintDBRequest) returns (PrintDBResponse);
}

message TxnSet {
  int32 SetNo = 1;
  repeated TxnRequest Txns = 2;
  repeated string LiveServers = 3;
}

message TxnRequest {
  string MsgID = 1;
  string Sender = 2;
  string Receiver = 3;
  float Amount = 4;
  int32 Term = 5;
}

message Ballot {
  int32 TermNumber = 1;
  int32 ServerNumber = 2;
}

message Prepare {
  Ballot BallotNum = 1;
  int32 LastCommittedTerm = 2;
}

message Promise {
  bool PromiseAck = 1;
  int32 ServerNumber = 2;
  Ballot BallotNum = 3;
  Ballot AcceptNum = 4;
  repeated TxnRequest AcceptVal = 5;
  repeated TxnRequest LocalVal = 6;
}

message Accept {
  Ballot BallotNum = 1;
  repeated TxnRequest AcceptVal = 2;
  repeated string ServerAddresses = 3;
}

message Accepted {
  Ballot BallotNum = 1;
  repeated TxnRequest AcceptVal = 2;
  int32 ServerNumber = 3;
}

message Commit {
  Ballot BallotNum = 1;
  repeated TxnRequest AcceptVal = 2;
  repeated string ServerAddresses = 3;
  int32 LastCommittedTerm = 4;
}

message SyncRequest {
  int32 LastCommittedTerm = 1;
  int32 ServerNo = 2;
}

message GetBalanceRequest{
  string User = 1;
}

message GetBalanceResponse {
  float Balance = 1;
}

message GetServerBalanceRequest{
  int32 LastCommittedTerm = 1;
  string User = 2;
}

message GetServerBalanceResponse{
  Ballot BallotNum = 1;
  repeated TxnRequest CommittedTxns = 2;
  map<string, TxnRequest> LogTxns = 3;
}

message IsAliveRequest{
  bool IsAlive = 1;
}

message PrintLogsRequest {
  string User = 1;
}

message PrintLogsResponse {
  map<string, TxnRequest> Logs = 1;
}

message PrintDBRequest {
  string User = 1;
}

message PrintDBResponse {
  repeated TxnRequest Txns = 1;
}